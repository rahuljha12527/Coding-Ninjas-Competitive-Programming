Maximum Activity Subset
Send Feedback
You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.
Input Format
The first line of input contains one integer denoting N.
Next N lines contains two space separated integers denoting the start time and finish time for the ith activity. 
Constraints
1 ≤ N ≤ 10^6
1 ≤ ai, di ≤ 10^9
Output Format
Output one integer, the maximum number of activities that can be performed
Sample Input 1
6
1 2
3 4
0 6
5 7
8 9
5 9
Sample Output 1
4
Explanation:
The four activities will be done at following time intervals:
1. 1 2
2. 3 4
3. 5 7
4. 8 9











import java.util.*;

class Activity implements Comparable<Activity>{
	int start;
	int finish;

	public Activity(int start,int finish){
		this.start=start;
		this.finish=finish;
	}

	@Override
	public int compareTo(Activity other){
		return this.finish-other.finish;
	}
}
public class Solution {


	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();


		Activity[] activities=new Activity[n];

		for(int i=0;i<n;i++){
		    int start=sc.nextInt();
			int finish=sc.nextInt();
             activities[i]=new Activity(start,finish);

			
		}

       
	   Arrays.sort(activities);
	  int count=1;
	  int previousFinish=activities[0].finish;
	  for(int i=1;i<n;i++){
		  if(activities[i].start>=previousFinish){
			  count++;
			  previousFinish=activities[i].finish;
		  }
	  }

    System.out.println(count);

	}

}
